/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponseBoolean
 */
export interface ApiResponseBoolean {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBoolean
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBoolean
     */
    'statusCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiResponseBoolean
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplUsers
 */
export interface ApiResponseCustomPageImplUsers {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplUsers
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplUsers
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplUsers}
     * @memberof ApiResponseCustomPageImplUsers
     */
    'data'?: CustomPageImplUsers;
}
/**
 * 
 * @export
 * @interface ApiResponseUsers
 */
export interface ApiResponseUsers {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseUsers
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseUsers
     */
    'statusCode'?: string;
    /**
     * 
     * @type {Users}
     * @memberof ApiResponseUsers
     */
    'data'?: Users;
}
/**
 * 
 * @export
 * @interface CustomPageImplUsers
 */
export interface CustomPageImplUsers {
    /**
     * 
     * @type {Array<Users>}
     * @memberof CustomPageImplUsers
     */
    'content'?: Array<Users>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplUsers
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplUsers
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplUsers
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplUsers
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplUsers
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplUsers
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplUsers
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplUsers
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplUsers
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplUsers
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {number}
     * @memberof Users
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'isDeleted'?: string;
}
/**
 * 
 * @export
 * @interface UsersLoginRequest
 */
export interface UsersLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersLoginRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersLoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UsersRegisterRequest
 */
export interface UsersRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterRequest
     */
    'checkPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterRequest
     */
    'avatar'?: string;
}

/**
 * UsersControllerApi - axios parameter creator
 * @export
 */
export const UsersControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (users: Users, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'users' is not null or undefined
            assertParamExists('create', 'users', users)
            const localVarPath = `/users/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(users, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsers', 'id', id)
            const localVarPath = `/users/deleteUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrent: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one', 'id', id)
            const localVarPath = `/users/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceUsers: async (id: number, users: Users, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceUsers', 'id', id)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('replaceUsers', 'users', users)
            const localVarPath = `/users/replaceUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(users, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('searchUser', 'username', username)
            const localVarPath = `/users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsersLoginRequest} usersLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (usersLoginRequest: UsersLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersLoginRequest' is not null or undefined
            assertParamExists('userLogin', 'usersLoginRequest', usersLoginRequest)
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsersRegisterRequest} usersRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister: async (usersRegisterRequest: UsersRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersRegisterRequest' is not null or undefined
            assertParamExists('userRegister', 'usersRegisterRequest', usersRegisterRequest)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersControllerApi - functional programming interface
 * @export
 */
export const UsersControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.all']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(users: Users, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsers(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsers(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.deleteUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrent(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrent(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.getCurrent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.one']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceUsers(id: number, users: Users, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceUsers(id, users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.replaceUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUser(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUser(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.searchUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UsersLoginRequest} usersLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(usersLoginRequest: UsersLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(usersLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.userLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.userLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UsersRegisterRequest} usersRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegister(usersRegisterRequest: UsersRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(usersRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersControllerApi.userRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersControllerApi - factory interface
 * @export
 */
export const UsersControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplUsers> {
            return localVarFp.all(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(users: Users, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUsers> {
            return localVarFp.create(users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteUsers(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrent(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCurrent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUsers> {
            return localVarFp.one(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Users} users 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceUsers(id: number, users: Users, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUsers> {
            return localVarFp.replaceUsers(id, users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser(username: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.searchUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersLoginRequest} usersLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(usersLoginRequest: UsersLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userLogin(usersLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersRegisterRequest} usersRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister(usersRegisterRequest: UsersRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userRegister(usersRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersControllerApi - object-oriented interface
 * @export
 * @class UsersControllerApi
 * @extends {BaseAPI}
 */
export class UsersControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public all(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).all(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Users} users 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public create(users: Users, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).create(users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public deleteUsers(id: number, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).deleteUsers(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public getCurrent(options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).getCurrent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public one(id: number, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).one(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Users} users 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public replaceUsers(id: number, users: Users, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).replaceUsers(id, users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public searchUser(username: string, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).searchUser(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersLoginRequest} usersLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public userLogin(usersLoginRequest: UsersLoginRequest, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).userLogin(usersLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public userLogout(options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersRegisterRequest} usersRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public userRegister(usersRegisterRequest: UsersRegisterRequest, options?: RawAxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).userRegister(usersRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



