/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponseBiUser
 */
export interface ApiResponseBiUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBiUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBiUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {BiUser}
     * @memberof ApiResponseBiUser
     */
    'data'?: BiUser;
}
/**
 * 
 * @export
 * @interface ApiResponseBoolean
 */
export interface ApiResponseBoolean {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseBoolean
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseBoolean
     */
    'statusCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiResponseBoolean
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiResponseChart
 */
export interface ApiResponseChart {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseChart
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseChart
     */
    'statusCode'?: string;
    /**
     * 
     * @type {Chart}
     * @memberof ApiResponseChart
     */
    'data'?: Chart;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplBiUser
 */
export interface ApiResponseCustomPageImplBiUser {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplBiUser
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplBiUser
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplBiUser}
     * @memberof ApiResponseCustomPageImplBiUser
     */
    'data'?: CustomPageImplBiUser;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplChart
 */
export interface ApiResponseCustomPageImplChart {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplChart
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplChart
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplChart}
     * @memberof ApiResponseCustomPageImplChart
     */
    'data'?: CustomPageImplChart;
}
/**
 * 
 * @export
 * @interface ApiResponseCustomPageImplQueryChartVO
 */
export interface ApiResponseCustomPageImplQueryChartVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseCustomPageImplQueryChartVO
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseCustomPageImplQueryChartVO
     */
    'statusCode'?: string;
    /**
     * 
     * @type {CustomPageImplQueryChartVO}
     * @memberof ApiResponseCustomPageImplQueryChartVO
     */
    'data'?: CustomPageImplQueryChartVO;
}
/**
 * 
 * @export
 * @interface ApiResponseGenChartByAiResult
 */
export interface ApiResponseGenChartByAiResult {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseGenChartByAiResult
     */
    'statusCodeValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseGenChartByAiResult
     */
    'statusCode'?: string;
    /**
     * 
     * @type {GenChartByAiResult}
     * @memberof ApiResponseGenChartByAiResult
     */
    'data'?: GenChartByAiResult;
}
/**
 * 
 * @export
 * @interface BiUser
 */
export interface BiUser {
    /**
     * 
     * @type {number}
     * @memberof BiUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'userPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'userRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'updateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BiUser
     */
    'isDeleted'?: string;
}
/**
 * 
 * @export
 * @interface Chart
 */
export interface Chart {
    /**
     * 
     * @type {number}
     * @memberof Chart
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'goal'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'chartData'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'chartType'?: string;
    /**
     * 
     * @type {number}
     * @memberof Chart
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'updateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'isDeleted'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Chart
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface CustomPageImplBiUser
 */
export interface CustomPageImplBiUser {
    /**
     * 
     * @type {Array<BiUser>}
     * @memberof CustomPageImplBiUser
     */
    'content'?: Array<BiUser>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBiUser
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBiUser
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBiUser
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplBiUser
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBiUser
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBiUser
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplBiUser
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplBiUser
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBiUser
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplBiUser
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomPageImplChart
 */
export interface CustomPageImplChart {
    /**
     * 
     * @type {Array<Chart>}
     * @memberof CustomPageImplChart
     */
    'content'?: Array<Chart>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplChart
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplChart
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplChart
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplChart
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplChart
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplChart
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplChart
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplChart
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplChart
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplChart
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomPageImplQueryChartVO
 */
export interface CustomPageImplQueryChartVO {
    /**
     * 
     * @type {Array<QueryChartVO>}
     * @memberof CustomPageImplQueryChartVO
     */
    'content'?: Array<QueryChartVO>;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplQueryChartVO
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplQueryChartVO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplQueryChartVO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof CustomPageImplQueryChartVO
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplQueryChartVO
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplQueryChartVO
     */
    'totalPages'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof CustomPageImplQueryChartVO
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof CustomPageImplQueryChartVO
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplQueryChartVO
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPageImplQueryChartVO
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface GenChartByAiResult
 */
export interface GenChartByAiResult {
    /**
     * 
     * @type {string}
     * @memberof GenChartByAiResult
     */
    'genChart'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenChartByAiResult
     */
    'genResult'?: string;
    /**
     * 
     * @type {number}
     * @memberof GenChartByAiResult
     */
    'chartId'?: number;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface QueryChartVO
 */
export interface QueryChartVO {
    /**
     * 
     * @type {number}
     * @memberof QueryChartVO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'goal'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'chartData'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'chartType'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'genChart'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'genResult'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryChartVO
     */
    'execMessage'?: string;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface UserLoginRequestDTO
 */
export interface UserLoginRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequestDTO
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequestDTO
     */
    'userPassword'?: string;
}
/**
 * 
 * @export
 * @interface UserRegisterRequestDTO
 */
export interface UserRegisterRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequestDTO
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequestDTO
     */
    'userPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequestDTO
     */
    'checkUserPassword'?: string;
}

/**
 * BiUserControllerApi - axios parameter creator
 * @export
 */
export const BiUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all1: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/biuser/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (biUser: BiUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'biUser' is not null or undefined
            assertParamExists('create1', 'biUser', biUser)
            const localVarPath = `/biuser/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(biUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBiUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBiUser', 'id', id)
            const localVarPath = `/biuser/deleteBiUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one1', 'id', id)
            const localVarPath = `/biuser/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBiUser: async (id: number, biUser: BiUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceBiUser', 'id', id)
            // verify required parameter 'biUser' is not null or undefined
            assertParamExists('replaceBiUser', 'biUser', biUser)
            const localVarPath = `/biuser/replaceBiUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(biUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginRequestDTO} userLoginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (userLoginRequestDTO: UserLoginRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginRequestDTO' is not null or undefined
            assertParamExists('userLogin', 'userLoginRequestDTO', userLoginRequestDTO)
            const localVarPath = `/biuser/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/biuser/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterRequestDTO} userRegisterRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister: async (userRegisterRequestDTO: UserRegisterRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterRequestDTO' is not null or undefined
            assertParamExists('userRegister', 'userRegisterRequestDTO', userRegisterRequestDTO)
            const localVarPath = `/biuser/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BiUserControllerApi - functional programming interface
 * @export
 */
export const BiUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BiUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all1(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all1(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.all1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(biUser: BiUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(biUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.create1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBiUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBiUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.deleteBiUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.one1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceBiUser(id: number, biUser: BiUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBiUser(id, biUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.replaceBiUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserLoginRequestDTO} userLoginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(userLoginRequestDTO: UserLoginRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(userLoginRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.userLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.userLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserRegisterRequestDTO} userRegisterRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegister(userRegisterRequestDTO: UserRegisterRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBiUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(userRegisterRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BiUserControllerApi.userRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BiUserControllerApi - factory interface
 * @export
 */
export const BiUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BiUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all1(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplBiUser> {
            return localVarFp.all1(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(biUser: BiUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBiUser> {
            return localVarFp.create1(biUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBiUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteBiUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBiUser> {
            return localVarFp.one1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {BiUser} biUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBiUser(id: number, biUser: BiUser, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBiUser> {
            return localVarFp.replaceBiUser(id, biUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginRequestDTO} userLoginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(userLoginRequestDTO: UserLoginRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBiUser> {
            return localVarFp.userLogin(userLoginRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegisterRequestDTO} userRegisterRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister(userRegisterRequestDTO: UserRegisterRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBiUser> {
            return localVarFp.userRegister(userRegisterRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BiUserControllerApi - object-oriented interface
 * @export
 * @class BiUserControllerApi
 * @extends {BaseAPI}
 */
export class BiUserControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public all1(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).all1(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BiUser} biUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public create1(biUser: BiUser, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).create1(biUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public deleteBiUser(id: number, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).deleteBiUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public one1(id: number, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).one1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {BiUser} biUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public replaceBiUser(id: number, biUser: BiUser, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).replaceBiUser(id, biUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginRequestDTO} userLoginRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public userLogin(userLoginRequestDTO: UserLoginRequestDTO, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).userLogin(userLoginRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public userLogout(options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegisterRequestDTO} userRegisterRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BiUserControllerApi
     */
    public userRegister(userRegisterRequestDTO: UserRegisterRequestDTO, options?: RawAxiosRequestConfig) {
        return BiUserControllerApiFp(this.configuration).userRegister(userRegisterRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChartControllerApi - axios parameter creator
 * @export
 */
export const ChartControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chart/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (chart: Chart, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chart' is not null or undefined
            assertParamExists('create', 'chart', chart)
            const localVarPath = `/chart/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChart: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChart', 'id', id)
            const localVarPath = `/chart/deleteChart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genChartByAi: async (name?: string, goal?: string, multipartFile?: File, chartType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chart/gen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (goal !== undefined) { 
                localVarFormParams.append('goal', goal as any);
            }
    
            if (multipartFile !== undefined) { 
                localVarFormParams.append('multipartFile', multipartFile as any);
            }
    
            if (chartType !== undefined) { 
                localVarFormParams.append('chartType', chartType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genChartByAiWithAsyncMq: async (name?: string, goal?: string, multipartFile?: File, chartType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chart/genMq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (goal !== undefined) { 
                localVarFormParams.append('goal', goal as any);
            }
    
            if (multipartFile !== undefined) { 
                localVarFormParams.append('multipartFile', multipartFile as any);
            }
    
            if (chartType !== undefined) { 
                localVarFormParams.append('chartType', chartType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChart: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chart/listChart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('one', 'id', id)
            const localVarPath = `/chart/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceChart: async (id: number, chart: Chart, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceChart', 'id', id)
            // verify required parameter 'chart' is not null or undefined
            assertParamExists('replaceChart', 'chart', chart)
            const localVarPath = `/chart/replaceChart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChartControllerApi - functional programming interface
 * @export
 */
export const ChartControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChartControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.all']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(chart: Chart, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(chart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChart(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChart(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.deleteChart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genChartByAi(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseGenChartByAiResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genChartByAi(name, goal, multipartFile, chartType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.genChartByAi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genChartByAiWithAsyncMq(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseGenChartByAiResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genChartByAiWithAsyncMq(name, goal, multipartFile, chartType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.genChartByAiWithAsyncMq']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChart(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCustomPageImplQueryChartVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChart(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.listChart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async one(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.one(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.one']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceChart(id: number, chart: Chart, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceChart(id, chart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartControllerApi.replaceChart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChartControllerApi - factory interface
 * @export
 */
export const ChartControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChartControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplChart> {
            return localVarFp.all(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(chart: Chart, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChart> {
            return localVarFp.create(chart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChart(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.deleteChart(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genChartByAi(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseGenChartByAiResult> {
            return localVarFp.genChartByAi(name, goal, multipartFile, chartType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [goal] 
         * @param {File} [multipartFile] 
         * @param {string} [chartType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genChartByAiWithAsyncMq(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseGenChartByAiResult> {
            return localVarFp.genChartByAiWithAsyncMq(name, goal, multipartFile, chartType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChart(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCustomPageImplQueryChartVO> {
            return localVarFp.listChart(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        one(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChart> {
            return localVarFp.one(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Chart} chart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceChart(id: number, chart: Chart, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChart> {
            return localVarFp.replaceChart(id, chart, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChartControllerApi - object-oriented interface
 * @export
 * @class ChartControllerApi
 * @extends {BaseAPI}
 */
export class ChartControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public all(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).all(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Chart} chart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public create(chart: Chart, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).create(chart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public deleteChart(id: number, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).deleteChart(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {string} [goal] 
     * @param {File} [multipartFile] 
     * @param {string} [chartType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public genChartByAi(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).genChartByAi(name, goal, multipartFile, chartType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {string} [goal] 
     * @param {File} [multipartFile] 
     * @param {string} [chartType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public genChartByAiWithAsyncMq(name?: string, goal?: string, multipartFile?: File, chartType?: string, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).genChartByAiWithAsyncMq(name, goal, multipartFile, chartType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public listChart(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).listChart(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public one(id: number, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).one(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Chart} chart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartControllerApi
     */
    public replaceChart(id: number, chart: Chart, options?: RawAxiosRequestConfig) {
        return ChartControllerApiFp(this.configuration).replaceChart(id, chart, options).then((request) => request(this.axios, this.basePath));
    }
}



